services:
  # NGINX
  nginx:
    image: nginx:latest
    ports:
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/nginx/server.crt:/etc/ssl/certs/server.crt:ro
      - ./ssl/nginx/server.key:/etc/ssl/private/server.key:ro
    networks:
      - network
    restart: always

  # FRONTEND
  frontend:
    build: ./services/frontend
    volumes:
      - ./services/frontend/src:/app/src:ro
      - ./services/frontend/public:/app/public:ro
    networks:
      - network
    restart: always

  # USER
  user:
    build: ./services/user
    environment:
      PORT: ${SERVER_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - network
    depends_on:
      user-postgres:
        condition: service_healthy
    restart: always

  user-postgres:
    image: postgres:17.4
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - network
    volumes:
      - ./sql/user-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - user-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    restart: always

  user-redis:
    image: redis:7.4.2
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - user-redis-data:/data
    networks:
      - network

  # PROJECT
  project:
    build: ./services/project
    environment:
      PORT: ${SERVER_PORT}
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - network
    depends_on:
      project-postgres:
        condition: service_healthy
    restart: always

  project-postgres:
    image: postgres:17.4
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - network
    volumes:
      - ./sql/project-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - project-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    restart: always

  # ADMIN
  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - network
    restart: always

  redisinsight:
    image: redis/redisinsight:latest
    ports:
      - 5540:5540
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  user-redis-data: null
  user-postgres-data: null
  project-postgres-data: null
